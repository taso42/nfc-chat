#################################################################
# jdbcAuth configuration file.
# Note that allowGuests and storeGuests are in nfc.conf
# To be modified to match your database.  
# Default values assume MySQL.
#################################################################

# JDBC Driver Class
jdbc.Class=com.mysql.jdbc.Driver
#jdbc.Class=org.postgresql.Driver

# JDBC URL
# try appending "?autoReconnect=true" to the mysql-jdbc-url if your mysql-connection breaks down regularly
jdbc.DBUrl=jdbc:mysql://localhost/nfc
#jdbc.DBUrl=jdbc:postgresql://localhost:5432/nfc

# Database username
jdbc.DBUsername=nfc

# Database password
jdbc.DBPassword=chat

#### for JdbcAuthenticator
# Name of the users table
jdbc.Table=nfc_users

# Name of the user field
jdbc.IdField=uname

# Name of the password field
jdbc.PasswordField=password

# Name of the access level field
jdbc.AuthField=access

# How should the passwords be encrypted? Possible 
# vaues are none (default), md5 and mysql. The 
# latter leaves encryption to the password function in MySQL.
jdbc.CryptMethod=none

#### for JdbcIgnoreStore
# data will be read & stored from nfc_users_ignoring_users,
# columns "ignorer" and "ignoree".  this is hardcoded.
#
# you should implement this as a view against a table containing
# whatever real primary keys you use.  See postgresql.sql
# for an example.  (This way when users
# are renamed, your ignore data remains correct.)  Use triggers
# to allow inserts & deletes on the view.  (no updates are performed,
# so you can leave that out.)
#
# If you use a "database" that lacks these features, you can
# create an actual table rather than a view and insert raw
# usernames, and either disallow uname changes or manually update
# on change.  [NFC will never change them so if NFC is the
# only app you are running, you are fine.]  Or, you can upgrade
# to a real database. :P

#### for JdbcRoomAuthenticator
# Define an appropriate statement for your installation to return
# the desired information.  See contrib/postgresql.sql for
# example tables corresponding to these defaults.
# Power users should note that this config leaves it open for you
# to call stored procedures or functions if necessary to implement
# your policy.
# (Please don't use colons in your statements except to prefix 
# runtime variables; my poor feebleminded parser won't be able to handle it.)

# Statement for isCreateAllowed().  
# Runtime vars provided are {username, roomname, password}.
# Statement must return a value ResultSet.getBoolean() can convert.
# Examples:
# -- any user may create any room
# jdbc.isCreateAllowed=select 1
# -- check with a function (this example is from contrib/postgresql.sql)
# jdbc.isCreateAllowed=select nfc_is_create_allowed(:username, :roomname, :password) 

# Statement used by getNextOp().
# Runtime vars provided are {roomname}.
# must return getBoolean()-compatible.
# if true, JdbcRoomAuthenticator will call NullRoomAuthenticator.getNextOp
# when last op leaves.  otherwise, it will only op users whose AccessLevel returns moderator.
# Examples:
# -- all rooms have a server-designated Op:
# jdbc.isOpRequired=select 1
# -- only non-"public" rooms have server-designated Ops:
# jdbc.isOpRequired=select not exists (select 1 from nfc_public_rooms where name = :roomname)

# Statement used by getAccessLevel().  
# Runtime vars provided are {username, roomname}.
# returns int as defined in IAuthenticator (0 = not allowed, 1 = user, 2 = op).
# * this will only be called for users who do NOT have global priviledges of
#   higher than MODERATOR (currently GOD and SERVER) returned by
#   the current Authenticator.  So if it makes it simpler for you to
#   ignore those users here, feel free.
# Examples:
# -- no special users
# jdbc.getRoomAccessLevel=select 1